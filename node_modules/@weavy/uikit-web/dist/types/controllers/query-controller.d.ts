import { LitElement, ReactiveController, ReactiveControllerHost } from "lit";
import { type QueryClient, type QueryObserverResult, type QueryObserverOptions, QueryObserver } from "@tanstack/query-core";
import { ContextConsumer } from "@lit/context";
import { WeavyContext } from "../client/context-definition";
export declare class QueryController<TData = unknown> implements ReactiveController {
    host: ReactiveControllerHost;
    context?: ContextConsumer<{
        __context__: WeavyContext;
    }, LitElement>;
    whenContext?: Promise<void>;
    resolveContext?: (value: void | PromiseLike<void>) => void;
    observer?: QueryObserver<TData>;
    private _result?;
    get result(): QueryObserverResult<TData>;
    private observeUnsubscribe?;
    constructor(host: ReactiveControllerHost);
    setContext(): Promise<void>;
    hostUpdate(): void;
    trackQuery(queryOptions: QueryObserverOptions<TData>, queryClient?: QueryClient): Promise<void>;
    untrackQuery(): void;
    hostDisconnected(): void;
}
//# sourceMappingURL=query-controller.d.ts.map