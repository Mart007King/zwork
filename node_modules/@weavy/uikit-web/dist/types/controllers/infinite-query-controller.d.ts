import { LitElement, ReactiveController, ReactiveControllerHost } from "lit";
import { type QueryClient, type InfiniteQueryObserverResult, type InfiniteQueryObserverOptions, type InfiniteData, InfiniteQueryObserver } from "@tanstack/query-core";
import { ContextConsumer } from "@lit/context";
import { WeavyContext } from "../client/context-definition";
export declare class InfiniteQueryController<TData = unknown> implements ReactiveController {
    host: ReactiveControllerHost;
    context?: ContextConsumer<{
        __context__: WeavyContext;
    }, LitElement>;
    whenContext?: Promise<void>;
    resolveContext?: (value: void | PromiseLike<void>) => void;
    observer?: InfiniteQueryObserver<TData>;
    private _result?;
    get result(): InfiniteQueryObserverResult<InfiniteData<TData, unknown>>;
    private observeUnsubscribe?;
    constructor(host: ReactiveControllerHost);
    setContext(): Promise<void>;
    hostUpdate(): void;
    trackInfiniteQuery(infiniteQueryOptions: InfiniteQueryObserverOptions<TData, Error, InfiniteData<TData>>, queryClient?: QueryClient): Promise<void>;
    untrackInfiniteQuery(): void;
    hostDisconnected(): void;
}
//# sourceMappingURL=infinite-query-controller.d.ts.map