import { LitElement, ReactiveController, ReactiveControllerHost } from "lit";
import { type QueryClient, type MutationState, type MutationFilters, type Mutation, type DefaultError } from "@tanstack/query-core";
import { ContextConsumer } from "@lit/context";
import { WeavyContext } from "../client/context-definition";
type MutationStateOptions<TResult = MutationState> = {
    filters?: MutationFilters;
    select?: (mutation: Mutation<unknown, DefaultError, unknown, unknown>) => TResult;
};
export declare class MutationStateController<TData, TError, TVariables, TContext> implements ReactiveController {
    host: ReactiveControllerHost;
    context?: ContextConsumer<{
        __context__: WeavyContext;
    }, LitElement>;
    whenContext?: Promise<void>;
    resolveContext?: (value: void | PromiseLike<void>) => void;
    result?: MutationState<TData, TError, TVariables, TContext>[];
    mutationCacheUnsubscribe?: () => void;
    alwaysUpdate: boolean;
    constructor(host: ReactiveControllerHost);
    setContext(): Promise<void>;
    hostUpdate(): void;
    trackMutationState(options: MutationStateOptions<MutationState<TData, TError, TVariables, TContext>>, queryClient?: QueryClient): Promise<MutationState<TData, TError, TVariables, TContext>[]>;
    hostDisconnected(): void;
}
export {};
//# sourceMappingURL=mutation-state-controller.d.ts.map