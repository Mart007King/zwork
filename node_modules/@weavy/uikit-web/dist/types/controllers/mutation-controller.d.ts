import { LitElement, ReactiveController, ReactiveControllerHost } from "lit";
import { type QueryClient, type MutationObserverResult, type MutationObserverOptions, MutationObserver } from "@tanstack/query-core";
import { ContextConsumer } from "@lit/context";
import { WeavyContext } from "../client/context-definition";
export declare class MutationController<TData, TError, TVariables, TContext> implements ReactiveController {
    host: ReactiveControllerHost;
    context?: ContextConsumer<{
        __context__: WeavyContext;
    }, LitElement>;
    whenContext?: Promise<void>;
    resolveContext?: (value: void | PromiseLike<void>) => void;
    observer?: MutationObserver<TData, TError, TVariables, TContext>;
    result?: MutationObserverResult<TData, TError, TVariables, TContext>;
    private observeUnsubscribe?;
    constructor(host: ReactiveControllerHost);
    setContext(): Promise<void>;
    hostUpdate(): void;
    trackMutation(options: MutationObserverOptions<TData, TError, TVariables, TContext>, queryClient?: QueryClient): Promise<MutationObserver<TData, TError, TVariables, TContext>>;
    untrackMutation(): void;
    get mutate(): (variables: TVariables, options?: import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").ar<TData, TError, TVariables, TContext> | undefined) => Promise<TData>;
    hostDisconnected(): void;
}
//# sourceMappingURL=mutation-controller.d.ts.map