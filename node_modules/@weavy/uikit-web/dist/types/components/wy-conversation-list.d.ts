import { LitElement, type PropertyValues } from "lit";
import { InfiniteQueryController } from "../controllers/infinite-query-controller";
import { ConversationsResultType } from "../types/conversations.types";
import type { UserType } from "../types/users.types";
import "./wy-conversation-list-item";
import "./wy-conversation-new";
import "./wy-presence";
import "./wy-avatar";
import "./wy-empty";
import "./wy-spinner";
import { QueryController } from "../controllers/query-controller";
import { WeavyContextProps } from "../types/weavy.types";
export default class WeavyConversationList extends LitElement {
    static styles: any[];
    _chatRoomId: string;
    private weavyContext?;
    user?: UserType;
    name?: string;
    conversationId?: number;
    private searchText?;
    private inputRef;
    conversationsQuery: InfiniteQueryController<ConversationsResultType>;
    userQuery: QueryController<UserType>;
    private markConversationMutation?;
    private starConversationMutation?;
    private pinConversationMutation?;
    private leaveConversationMutation?;
    private infiniteScroll;
    private pagerRef;
    private handleRefresh;
    private handlePresenceChange;
    protected willUpdate(changedProperties: PropertyValues<this & WeavyContextProps>): Promise<void>;
    protected update(changedProperties: PropertyValues<this>): void;
    updated(changedProperties: PropertyValues<this & {
        searchText: string;
    }>): Promise<void>;
    private dispatchSelected;
    private handleMark;
    private handleStar;
    private handlePin;
    private handleLeaveConversation;
    private throttledSearch;
    private clear;
    private renderConversations;
    render(): import("lit").TemplateResult<1>;
    disconnectedCallback(): void;
}
//# sourceMappingURL=wy-conversation-list.d.ts.map