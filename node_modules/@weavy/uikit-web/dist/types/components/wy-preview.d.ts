import { LitElement, PropertyValues } from "lit";
import { type FeaturesListType, type FeaturesConfigType } from "../types/features.types";
import type { FilesResultType, FileType } from "../types/files.types";
import type { AppType } from "../types/app.types";
import type { InfiniteData, InfiniteQueryObserverResult, QueryObserverResult } from "@tanstack/query-core";
import type { UserType } from "../types/users.types";
import { Ref } from "lit/directives/ref.js";
import { SwipeScrollController } from "../controllers/swipe-scroll-controller";
import "./wy-button";
import "./wy-icon";
import "./wy-overlay";
import "./wy-spinner";
import "./wy-dropdown";
import "./wy-preview-item";
import "./wy-file-menu";
import "./wy-comments";
import "./wy-file-versions";
export default class WyPreview extends LitElement {
    static styles: any[];
    private weavyContext?;
    uid: string;
    features?: FeaturesConfigType;
    availableFeatures?: FeaturesListType;
    files?: FileType[];
    queryResult?: QueryObserverResult<FileType[]>;
    infiniteQueryResult?: InfiniteQueryObserverResult<InfiniteData<FilesResultType, unknown>>;
    app?: AppType;
    user?: UserType;
    currentId: number;
    isAttachment: boolean;
    currentFile?: FileType;
    previousFile?: FileType;
    nextFile?: FileType;
    showOverlay: boolean;
    commentsOpen: boolean;
    versionsOpen: boolean;
    versionFile?: FileType;
    sidePanelMaximized: boolean;
    private persistState;
    private history;
    previewFileRef: Ref<Element>;
    swipeScrollRef: Ref<Element>;
    prevRef: Ref<Element>;
    nextRef: Ref<Element>;
    swipeScroller: SwipeScrollController;
    private disableSwipeScroll;
    private disableSwipeScrollTimeout?;
    open(file?: FileType, fileList?: FileType[], uid?: string): void;
    close(): void;
    toggleSidebarTab(tab?: "comments" | "versions", state?: boolean): void;
    handleVersionFile(e: CustomEvent): void;
    handleKeys: (e: KeyboardEvent) => void;
    scrollToPrev(): void;
    scrollToNext(): void;
    blockSwipeScroll(duration?: number): void;
    unblockSwipeScroll(): void;
    setPrev(): void;
    setNext(): void;
    currentPreviewFileCallback(refElement: Element | undefined): void;
    willUpdate(changedProperties: PropertyValues<this>): void;
    renderHeader(activeFile?: FileType): import("lit").TemplateResult<1>;
    render(): import("lit-html/directive").DirectiveResult<typeof import("lit-modal-portal/portal").PortalDirective>;
    updated(): void;
}
//# sourceMappingURL=wy-preview.d.ts.map