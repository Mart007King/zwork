import { LitElement, type PropertyValues } from "lit";
import { ContextConsumer } from "@lit/context";
import { type WeavyContext } from "../client/context-definition";
import { type ConversationType } from "../types/app.types";
import type { MessagesResultType } from "../types/messages.types";
import type { UserType } from "../types/users.types";
import { type FeaturesConfigType, type FeaturesListType } from "../types/features.types";
import type { MembersResultType } from "../types/members.types";
import { InfiniteQueryController } from "../controllers/infinite-query-controller";
import { QueryController } from "../controllers/query-controller";
import "./wy-empty";
import "./wy-typing";
import "./wy-presence";
import "./wy-message";
import "./wy-messages";
import "./wy-message-editor";
import "./wy-users-search";
import "./wy-overlay";
import "./wy-spinner";
import type { RealtimeAppEventType, RealtimeConversationDeliveredEventType, RealtimeConversationMarkedEventType, RealtimeMessageEventType, RealtimeReactionEventType } from "../types/realtime.types";
import { WeavyContextProps } from "../types/weavy.types";
export default class WyConversation extends LitElement {
    static styles: any[];
    protected weavyContextConsumer?: ContextConsumer<{
        __context__: WeavyContext;
    }, this>;
    protected weavyContext?: WeavyContext;
    user?: UserType;
    conversation?: ConversationType;
    lastReadMessageId?: number;
    lastReadMessagePosition: "top" | "bottom";
    cssClass?: string;
    availableFeatures?: FeaturesListType;
    features: FeaturesConfigType;
    protected showAddMembers: boolean;
    protected showDetails: boolean;
    protected conversationTitle: string;
    protected conversationTitleInput: string;
    /**
     * A keyboard-consuming element releases focus.
     * @event release-focus
     */
    releaseFocusEvent: () => CustomEvent<undefined>;
    isContextualChat(conversation?: ConversationType): boolean;
    isPrivateChat(conversation?: ConversationType): boolean;
    isChatRoom(conversation?: ConversationType): boolean;
    messagesQuery: InfiniteQueryController<MessagesResultType>;
    membersQuery: QueryController<MembersResultType>;
    userQuery: QueryController<UserType>;
    featuresQuery: QueryController<FeaturesListType>;
    private markConversationMutation?;
    private addMembersMutation?;
    private leaveConversationMutation?;
    private updateConversationMutation?;
    private addMessageMutation;
    private infiniteScroll;
    private pagerRef;
    private wasAtBottom;
    performUpdate(): Promise<void>;
    protected willUpdate(changedProperties: PropertyValues<this & WeavyContextProps>): void;
    protected update(changedProperties: PropertyValues<this>): void;
    updated(): void;
    private handleSubmit;
    handleRealtimeMessage: (realtimeEvent: RealtimeMessageEventType) => void;
    handleRealtimeReactionAdded: (realtimeEvent: RealtimeReactionEventType) => void;
    handleRealtimeReactionDeleted: (realtimeEvent: RealtimeReactionEventType) => void;
    handleRealtimeAppUpdated: (realtimeEvent: RealtimeAppEventType) => void;
    handleRealtimeSeenBy: (realtimeEvent: RealtimeConversationMarkedEventType) => void;
    handleRealtimeDelivered: (realtimeEvent: RealtimeConversationDeliveredEventType) => void;
    get isAtBottom(): boolean;
    scrollToBottom(): void;
    private unsubscribeToRealtime;
    private addMembers;
    private handleSaveConversationName;
    private leaveConversation;
    render(): import("lit").TemplateResult<1>;
    disconnectedCallback(): void;
}
//# sourceMappingURL=wy-conversation.d.ts.map