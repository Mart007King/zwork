import { LitElement, type PropertyValues } from "lit";
import type { FeaturesConfigType, FeaturesListType } from "../types/features.types";
import { InfiniteQueryController } from "../controllers/infinite-query-controller";
import { CommentsResultType } from "../types/comments.types";
import type { AppType } from "../types/app.types";
import type { UserType } from "../types/users.types";
import "./wy-comment";
import "./wy-spinner";
import "./wy-comment-editor";
import { RealtimeCommentEventType, RealtimeReactionEventType } from "../types/realtime.types";
import { WeavyContextProps } from "../types/weavy.types";
export default class WyComments extends LitElement {
    static styles: any;
    private weavyContext?;
    app: AppType;
    user: UserType;
    parentId: number;
    location: "posts" | "files" | "apps";
    features?: FeaturesConfigType;
    availableFeatures?: FeaturesListType;
    commentsQuery: InfiniteQueryController<CommentsResultType>;
    private addCommentMutation;
    private removeCommentMutation?;
    private restoreCommentMutation?;
    private pollMutation?;
    private infiniteScroll;
    private pagerRef;
    willUpdate(changedProperties: PropertyValues<this & WeavyContextProps>): Promise<void>;
    protected update(changedProperties: PropertyValues<this>): void;
    handleRealtimeCommentCreated: (realtimeEvent: RealtimeCommentEventType) => void;
    handleRealtimeReactionAdded: (realtimeEvent: RealtimeReactionEventType) => void;
    handleRealtimeReactionDeleted: (realtimeEvent: RealtimeReactionEventType) => void;
    private handleSubmit;
    private renderComments;
    render(): import("lit").TemplateResult<1>;
    disconnectedCallback(): void;
}
//# sourceMappingURL=wy-comments.d.ts.map