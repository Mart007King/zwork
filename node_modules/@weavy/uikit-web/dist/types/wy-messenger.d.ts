import { LitElement, type PropertyValues } from "lit";
import { PersistStateController } from "./controllers/persist-state-controller";
import type { FeaturesConfigType, FeaturesListType } from "./types/features.types";
import { ResizeController } from "./controllers/resize-controller";
import { ContextConsumer } from "@lit/context";
import { type WeavyContext } from "./client/context-definition";
import { RealtimeAppEventType, RealtimeConversationDeliveredEventType, RealtimeConversationMarkedEventType, RealtimeMemberEventType, RealtimeMessageEventType } from "./types/realtime.types";
import { type ConversationType, AppType } from "./types/app.types";
import { QueryController } from "./controllers/query-controller";
import type { UserType } from "./types/users.types";
import "./components/wy-empty";
import "./components/wy-conversation-list";
import "./components/wy-conversation";
import "./components/wy-button";
import "./components/wy-icon";
import "./components/wy-badge";
import "./components/wy-spinner";
import { WeavyContextProps } from "./types/weavy.types";
export default class WyMessenger extends LitElement {
    static styles: any[];
    protected weavyContextConsumer?: ContextConsumer<{
        __context__: WeavyContext;
    }, this>;
    protected weavyContext?: WeavyContext;
    name?: string;
    user?: UserType;
    conversationId: number | null;
    protected conversation?: ConversationType;
    features: FeaturesConfigType;
    availableFeatures?: FeaturesListType;
    protected conversationQuery: QueryController<ConversationType>;
    protected userQuery: QueryController<UserType>;
    protected featuresQuery: QueryController<FeaturesListType>;
    protected persistState: PersistStateController<this>;
    protected resizer: ResizeController;
    hasEventListener: {
        [key: string]: boolean;
    };
    /**
     * @ignore
     */
    addEventListener(type: any, listener: any, options?: any): void;
    /**
     * Event: New message created.
     * @event wy:message_created
     */
    protected realtimeMessageCreatedEvent: (realtimeEvent: RealtimeMessageEventType) => Promise<void>;
    /**
     * Event: Conversation added.
     * @event wy:app_created
     */
    protected realtimeAppCreatedEvent: (realtimeEvent: RealtimeAppEventType) => Promise<void>;
    /**
     * Event: Message seen-by status updated.
     * @event wy:conversation_marked
     */
    protected realtimeConversationMarkedEvent: (realtimeEvent: RealtimeConversationMarkedEventType) => Promise<void>;
    /**
     * Event: Message delivered status updated.
     * @event wy:conversation_delivered
     */
    protected realtimeConversationDeliveredEvent: (realtimeEvent: RealtimeConversationDeliveredEventType) => Promise<void>;
    /**
     * Event: A member is added to a conversation app.
     * @event wy:member_added
     */
    protected realtimeMemberAddedEvent: (realtimeEvent: RealtimeMemberEventType) => Promise<void>;
    /**
     * Checks if a conversation belongs to Messenger.
     *
     * @param conversation {AppType | number} - The conversation or id to check if it belongs to Messenger.
     * @returns Promise<Boolean>
     */
    conversationBelongsToMessenger(conversation: AppType | number): Promise<Boolean>;
    /**
     * Set the active conversation.
     *
     * @param id {number} - The id of the conversation to select.
     */
    selectConversation(id: number): Promise<void>;
    /**
     * Deselects any active conversation.
     */
    clearConversation(): void;
    constructor();
    protected performUpdate(): Promise<void>;
    protected willUpdate(changedProperties: PropertyValues<this & WeavyContextProps>): Promise<void>;
    render(): import("lit").TemplateResult<1>;
    firstUpdated(): void;
    disconnectedCallback(): void;
}
//# sourceMappingURL=wy-messenger.d.ts.map