import { type MutationKey, MutationObserver } from "@tanstack/query-core";
import { type WeavyContext } from "../client/weavy-context";
import type { PostMutationContextType, PostType } from "../types/posts.types";
import type { AppType } from "../types/app.types";
export type MutatePostVariables = {
    id: number;
};
export type RemovePostMutationType = MutationObserver<PostType, Error, MutatePostVariables, PostMutationContextType>;
export type DeleteForeverPostMutationType = MutationObserver<void, Error, MutatePostVariables, PostMutationContextType>;
export declare function getTrashPostMutationOptions(weavyContext: WeavyContext, app: AppType): {
    mutationKey: MutationKey;
    mutationFn: ({ id }: MutatePostVariables) => Promise<any>;
    onMutate: (variables: MutatePostVariables) => Promise<PostMutationContextType>;
    onSuccess: (data: PostType, variables: MutatePostVariables) => void;
};
export declare function getTrashPostMutation(weavyContext: WeavyContext, app: AppType): RemovePostMutationType;
export declare function getRestorePostMutationOptions(weavyContext: WeavyContext, app: AppType): {
    mutationKey: MutationKey;
    mutationFn: ({ id }: MutatePostVariables) => Promise<any>;
    onMutate: (variables: MutatePostVariables) => Promise<PostMutationContextType>;
    onSuccess: (data: PostType, variables: MutatePostVariables) => void;
};
export declare function getRestorePostMutation(weavyContext: WeavyContext, app: AppType): RemovePostMutationType;
//# sourceMappingURL=post-remove.d.ts.map