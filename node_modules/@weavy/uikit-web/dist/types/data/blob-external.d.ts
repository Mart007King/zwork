import { type WeavyContext } from "../client/weavy-context";
import type { BlobType, ExternalBlobType, FileMutationContextType } from "../types/files.types";
import type { AppType } from "../types/app.types";
import type { UserType } from "../types/users.types";
import { type MutationKey, MutationObserver } from "@tanstack/query-core";
export type MutateExternalBlobVariables = {
    externalBlob: ExternalBlobType;
};
export type ExternalBlobMutationType = MutationObserver<BlobType, Error, MutateExternalBlobVariables, FileMutationContextType>;
export declare function removeSuccessfulExternalBlobMutations(weavyContext: WeavyContext, app: AppType, name: string): void;
export declare function externalBlob(weavyContext: WeavyContext, externalBlob: ExternalBlobType): Promise<BlobType>;
export declare function getExternalBlobMutationOptions(weavyContext: WeavyContext, user: UserType, app: AppType, uniqueId?: string): {
    mutationFn: (variables: MutateExternalBlobVariables) => Promise<BlobType>;
    mutationKey: MutationKey;
    onMutate: (variables: MutateExternalBlobVariables) => Promise<FileMutationContextType>;
    onSuccess: (_data: BlobType, variables: MutateExternalBlobVariables, _context: FileMutationContextType | undefined) => void;
    onError(error: Error, variables: MutateExternalBlobVariables, _context: FileMutationContextType | undefined): void;
};
export declare function getExternalBlobMutation(weavyContext: WeavyContext, user: UserType, app: AppType, uniqueId?: string): ExternalBlobMutationType;
//# sourceMappingURL=blob-external.d.ts.map