import { InfiniteQueryObserverOptions, InfiniteData, MutationObserver } from "@tanstack/query-core";
import { type WeavyContext } from "../client/weavy-context";
import { ConversationMutationContextType, ConversationsResultType } from "../types/conversations.types";
import { ConversationType } from "../types/app.types";
export type MutateAddConversationVariables = {
    members: number[];
};
export type AddConversationMutationType = MutationObserver<ConversationType, Error, MutateAddConversationVariables, ConversationMutationContextType>;
export declare function getConversationsOptions(weavyContext: WeavyContext, options?: Object, searchText?: () => string | undefined): InfiniteQueryObserverOptions<ConversationsResultType, Error, InfiniteData<ConversationsResultType>>;
export declare function getAddConversationMutationOptions(weavyContext: WeavyContext): {
    mutationFn: ({ members }: MutateAddConversationVariables) => Promise<any>;
    onMutate: (_variables: MutateAddConversationVariables) => Promise<ConversationMutationContextType>;
};
export declare function getAddConversationMutation(weavyContext: WeavyContext): AddConversationMutationType;
//# sourceMappingURL=conversations.d.ts.map