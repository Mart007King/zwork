import { type MutationKey, MutationObserver } from "@tanstack/query-core";
import { type WeavyContext } from "../client/weavy-context";
import type { PostMutationContextType } from "../types/posts.types";
import { CommentMutationContextType, CommentType } from "../types/comments.types";
export type MutateCommentVariables = {
    id: number;
    appId: number;
    type: "posts" | "files" | "apps";
    parentId: number;
};
export type RemoveCommentMutationType = MutationObserver<CommentType, Error, MutateCommentVariables, CommentMutationContextType>;
export declare function getTrashCommentMutationOptions(weavyContext: WeavyContext, parentId: number): {
    mutationKey: MutationKey;
    mutationFn: ({ id }: MutateCommentVariables) => Promise<any>;
    onMutate: (variables: MutateCommentVariables) => Promise<CommentMutationContextType>;
    onSuccess: (data: CommentType, variables: MutateCommentVariables) => void;
};
export declare function getTrashCommentMutation(weavyContext: WeavyContext, parentId: number): RemoveCommentMutationType;
export declare function getRestoreCommentMutationOptions(weavyContext: WeavyContext, parentId: number): {
    mutationKey: MutationKey;
    mutationFn: ({ id }: MutateCommentVariables) => Promise<any>;
    onMutate: (variables: MutateCommentVariables) => Promise<PostMutationContextType>;
    onSuccess: (data: CommentType, variables: MutateCommentVariables) => void;
};
export declare function getRestoreCommentMutation(weavyContext: WeavyContext, parentId: number): RemoveCommentMutationType;
//# sourceMappingURL=comment-remove.d.ts.map