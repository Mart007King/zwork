import { type MutationKey, MutationObserver, type QueryKey } from "@tanstack/query-core";
import { type WeavyContext } from "../client/weavy-context";
import type { FileMutationContextType, FileType } from "../types/files.types";
import type { AppType } from "../types/app.types";
export type MutateFileVersionVariables = {
    versionFile: FileType;
};
export type FileVersionMutationType = MutationObserver<FileType, Error, MutateFileVersionVariables, FileMutationContextType>;
export type FileVersionDeleteMutationType = MutationObserver<void, Error, MutateFileVersionVariables, void>;
export declare function getFileVersionsKey(app: AppType, file: FileType): QueryKey;
export declare function getFileVersionRestoreMutationOptions(weavyContext: WeavyContext, app: AppType, file: FileType): {
    mutationKey: MutationKey;
    mutationFn: ({ versionFile }: MutateFileVersionVariables) => Promise<any>;
    onMutate: (variables: MutateFileVersionVariables) => Promise<FileMutationContextType>;
    onSuccess: (data: FileType, variables: MutateFileVersionVariables) => void;
    onError(error: Error, variables: MutateFileVersionVariables, context: FileMutationContextType | undefined): void;
    onSettled(): void;
};
export declare function getFileVersionRestoreMutation(weavyContext: WeavyContext, app: AppType, file: FileType): FileVersionMutationType;
export declare function getFileVersionDeleteMutationOptions(weavyContext: WeavyContext, app: AppType, file: FileType): {
    mutationKey: QueryKey;
    mutationFn: ({ versionFile }: MutateFileVersionVariables) => Promise<void>;
    onMutate: (variables: MutateFileVersionVariables) => Promise<void>;
    onSuccess: (data: void, variables: MutateFileVersionVariables) => void;
    onError(error: Error, variables: MutateFileVersionVariables): void;
};
export declare function getFileVersionDeleteMutation(weavyContext: WeavyContext, app: AppType, file: FileType): FileVersionDeleteMutationType;
//# sourceMappingURL=file-versions.d.ts.map