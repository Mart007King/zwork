import { QueryOptions, type QueryKey } from "@tanstack/query-core";
import { type WeavyContext } from "../client/weavy-context";
export declare function getApiOptions<T>(weavyContext: WeavyContext, apiKey: QueryKey, apiPath?: string, options?: QueryOptions<T>): {
    retry?: import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").a_<Error> | undefined;
    retryDelay?: import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").a$<Error> | undefined;
    networkMode?: import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").E | undefined;
    gcTime?: number | undefined;
    queryFn: import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").u<T, QueryKey, never>;
    persister?: ((queryFn: import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").u<import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").N<T>, QueryKey, never>, context: {
        queryKey: QueryKey;
        signal: AbortSignal;
        meta: Record<string, unknown> | undefined;
    }, query: import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").n<unknown, Error, unknown, QueryKey>) => import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").N<T> | Promise<import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").N<T>>) | undefined;
    queryHash?: string | undefined;
    queryKey: QueryKey;
    queryKeyHashFn?: import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").y<QueryKey> | undefined;
    initialData?: T | import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").I<T> | undefined;
    initialDataUpdatedAt?: number | (() => number | undefined) | undefined;
    behavior?: import("@tanstack/query-core/build/legacy/queryClient-bm-z2rsD").aF<T, Error, T, QueryKey> | undefined;
    structuralSharing?: boolean | (<T_1>(oldData: T_1 | undefined, newData: T_1) => T_1) | undefined;
    _defaulted?: boolean | undefined;
    meta?: Record<string, unknown> | undefined;
    maxPages?: number | undefined;
};
export declare function getApi<T>(weavyContext: WeavyContext, apiKey: QueryKey, apiPath?: string, options?: QueryOptions<T>, noCache?: boolean): Promise<T>;
//# sourceMappingURL=api.d.ts.map