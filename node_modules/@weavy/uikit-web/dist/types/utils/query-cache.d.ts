import { InfiniteData, QueryClient, QueryFilters, QueryKey, SetDataOptions } from "@tanstack/query-core";
import { PlainObjectType } from "src/types/generic.types";
import { InfiniteQueryResultType, QueryResultType } from "src/types/query.types";
export declare function findAnyExistingItem<TDataItem>(queryData: InfiniteData<InfiniteQueryResultType<TDataItem>> | QueryResultType<TDataItem> | undefined, propertyName: string, value: string, copy?: boolean): boolean | TDataItem | undefined;
export declare function addToQueryData<TDataItem>(queryData: InfiniteData<InfiniteQueryResultType<TDataItem>> | QueryResultType<TDataItem> | undefined, item: TDataItem, sorting?: {
    by?: string;
    descending?: boolean;
}, tempId?: number): InfiniteData<InfiniteQueryResultType<TDataItem>, unknown> | QueryResultType<TDataItem> | undefined;
export declare function updateQueryData<TDataItem>(queryData: InfiniteData<InfiniteQueryResultType<TDataItem>> | InfiniteQueryResultType<TDataItem> | QueryResultType<TDataItem> | undefined, select: number | ((item: TDataItem & PlainObjectType) => boolean), fnUpdater: Function): InfiniteQueryResultType<TDataItem> | InfiniteData<InfiniteQueryResultType<TDataItem>, unknown> | QueryResultType<TDataItem> | undefined;
export declare function removeQueryData<TDataItem>(queryData: InfiniteData<InfiniteQueryResultType<TDataItem>> | QueryResultType<TDataItem> | undefined, select: number | ((item: TDataItem & PlainObjectType) => boolean)): InfiniteData<InfiniteQueryResultType<TDataItem>, unknown> | QueryResultType<TDataItem> | undefined;
export declare const addCacheItem: <T>(queryClient: QueryClient, key: QueryKey, item: T, tempId?: number, sorting?: {
    by?: string;
    descending?: boolean;
}) => void | T;
export declare const addCacheItems: <T>(queryClient: QueryClient, filters: QueryFilters, item: T, tempId?: number, sorting?: {
    by?: string;
    descending?: boolean;
}) => void | T;
export declare const updateCacheItem: <T>(queryClient: QueryClient, key: QueryKey, select: number | ((item: T) => boolean), fnUpdater: Function) => void | T;
export declare const updateCacheItems: <T>(queryClient: QueryClient, filters: QueryFilters, select: number | ((item: T) => boolean), fnUpdater: Function) => void | T;
export declare const removeCacheItem: <T>(queryClient: QueryClient, key: QueryKey, select: number | ((item: T) => boolean)) => void | T;
export declare const removeCacheItems: <T>(queryClient: QueryClient, filters: QueryFilters, select: number | ((item: T) => boolean)) => void | T;
export declare function keepFirstPage(queryClient: QueryClient, queryKey: QueryKey, options?: SetDataOptions): void;
//# sourceMappingURL=query-cache.d.ts.map