import { LitElement, type PropertyValues } from "lit";
import { ContextConsumer } from "@lit/context";
import { type WeavyContext } from "./client/context-definition";
import type { AppType } from "./types/app.types";
import type { PostsResultType } from "./types/posts.types";
import type { UserType } from "./types/users.types";
import type { FeaturesConfigType, FeaturesListType } from "./types/features.types";
import { InfiniteQueryController } from "./controllers/infinite-query-controller";
import "./components/wy-post";
import "./components/wy-editor";
import "./components/wy-empty";
import "./components/wy-spinner";
import { RealtimeCommentEventType, RealtimePostEventType, RealtimeReactionEventType } from "./types/realtime.types";
import { QueryController } from "./controllers/query-controller";
import { WeavyContextProps } from "./types/weavy.types";
export default class WyPosts extends LitElement {
    static styles: any[];
    protected weavyContextConsumer?: ContextConsumer<{
        __context__: WeavyContext;
    }, this>;
    protected weavyContext?: WeavyContext;
    user?: UserType;
    uid?: string;
    cssClass?: string;
    availableFeatures?: FeaturesListType;
    features: FeaturesConfigType;
    /**
     * Event: New post created.
     * @event wy:post_created
     */
    realtimePostCreatedEvent: (realtimeEvent: RealtimePostEventType) => CustomEvent<RealtimePostEventType>;
    /**
     * Event: New comment created on a post.
     * @event wy:comment_created
     */
    realtimeCommentCreatedEvent: (realtimeEvent: RealtimeCommentEventType) => CustomEvent<RealtimeCommentEventType>;
    /**
     * Event: Post reaction added.
     * @event wy:reaction_added
     */
    realtimeReactionAddedEvent: (realtimeEvent: RealtimeReactionEventType) => CustomEvent<RealtimeReactionEventType>;
    /**
     * Event: Post reaction removed.
     * @event wy:reaction_removed
     */
    realtimeReactionRemovedEvent: (realtimeEvent: RealtimeReactionEventType) => CustomEvent<RealtimeReactionEventType>;
    protected app?: AppType;
    protected postsQuery: InfiniteQueryController<PostsResultType>;
    protected appQuery: QueryController<AppType>;
    protected userQuery: QueryController<UserType>;
    protected featuresQuery: QueryController<FeaturesListType>;
    private infiniteScroll;
    private pagerRef;
    private addPostMutation;
    private subscribePostMutation?;
    private removePostMutation?;
    private restorePostMutation?;
    private pollMutation?;
    constructor();
    performUpdate(): Promise<void>;
    private handleSubmit;
    handleRealtimePostCreated: (realtimeEvent: RealtimePostEventType) => void;
    handleRealtimeCommentCreated: (realtimeEvent: RealtimeCommentEventType) => void;
    handleRealtimeReactionAdded: (realtimeEvent: RealtimeReactionEventType) => void;
    handleRealtimeReactionDeleted: (realtimeEvent: RealtimeReactionEventType) => void;
    private unsubscribeToRealtime;
    willUpdate(changedProperties: PropertyValues<this & WeavyContextProps & {
        app: AppType;
    }>): void;
    protected update(changedProperties: PropertyValues<this>): void;
    private renderPosts;
    render(): import("lit").TemplateResult<1>;
    disconnectedCallback(): void;
}
//# sourceMappingURL=wy-posts.d.ts.map