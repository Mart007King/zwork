import { LocaleModule, configureLocalization } from "@lit/localize";
import { QueryClient } from "@tanstack/query-core";
import { HubConnection } from "@microsoft/signalr";
import { WeavyTokenFactory, WeavyOptions } from "../types/weavy.types";
import { RealtimeDataType, RealtimeEventType } from "../types/realtime.types";
import { ConnectionState, NetworkState, NetworkStatus } from "../types/server.types";
/**
 * Context for Weavy that handles communication with the server, data handling and common options.
 * Requires a `url` to the Weavy environment and an async `tokenFactory` that provides user access tokens.
 */
export declare class WeavyContext implements WeavyOptions {
    #private;
    /**
     * The semver version of the package.
     */
    static readonly version: string;
    /**
     * The Weavy source name; package name and version.
     */
    static readonly sourceName: string;
    /**
     * The locale used in the Weavy source.
     */
    static readonly sourceLocale = "en";
    static defaults: WeavyOptions;
    /**
     * The host where the Weavy context is provided.
     */
    readonly host: HTMLElement;
    zoomAuthenticationUrl: string | URL | undefined;
    cloudFilePickerUrl: string | URL | undefined;
    reactions: string[] | undefined;
    staleTime: number | undefined;
    gcTime: number | undefined;
    tokenFactoryTimeout: number | undefined;
    modalParent: string | undefined;
    scrollBehavior: "auto" | "instant" | "smooth" | undefined;
    get locales(): string[] | undefined;
    set locales(locales: string[] | undefined);
    get localesUrl(): string | URL | undefined;
    set localesUrl(localesUrl: string | URL | undefined);
    whenUrlAndTokenFactory(): Promise<void>;
    /**
     * The URL to the weavy environment.
     */
    get url(): string | URL | undefined;
    set url(url: string | URL | undefined);
    /**
     * Async function returning an `access_token` string for _your_ authenticated user. A boolean `refresh` parameter is provided to let you now if a fresh token is needed from Weavy.
     */
    get tokenFactory(): WeavyTokenFactory | undefined;
    set tokenFactory(tokenFactory: WeavyTokenFactory | undefined);
    getToken(refresh?: boolean): Promise<string>;
    get queryClient(): QueryClient;
    private createQueryClient;
    private disconnectQueryClient;
    private signalRAccessTokenRefresh;
    get rtmConnection(): HubConnection | undefined;
    whenConnectionStarted(): Promise<unknown>;
    private createConnection;
    disconnect(): Promise<void>;
    connect(): Promise<void>;
    subscribe<T extends RealtimeEventType | RealtimeDataType>(group: string | null, event: string, callback: (realTimeEvent: T) => void): Promise<void>;
    unsubscribe<T extends RealtimeEventType | RealtimeDataType>(group: string | null, event: string, callback: (realTimeEvent: T) => void): Promise<void>;
    get networkState(): NetworkState;
    set networkState(state: NetworkState);
    get connectionState(): ConnectionState;
    set connectionState(state: ConnectionState);
    get networkStateIsPending(): boolean;
    set networkStateIsPending(isPending: boolean);
    get network(): NetworkStatus;
    private triggerNetworkChange;
    addNetworkListener(callback: (state: NetworkStatus) => void): void;
    removeNetworkListener(callback: (state: NetworkStatus) => void): void;
    localization?: ReturnType<typeof configureLocalization>;
    /**
     * Selected locale. The locale must be pre configured in `.locales`.
     */
    get locale(): string;
    set locale(newLocale: string);
    localizedTemplates?: Map<string, LocaleModule | Promise<LocaleModule>>;
    loadLocale(newLocale: string): Promise<LocaleModule>;
    configureLocalization(): void;
    constructor(options?: WeavyOptions & {
        /**
         * The host where the Weavy context is provided.
         */
        host?: HTMLElement;
    });
    fetchOptions(): Promise<RequestInit>;
    get(url: string, contentType?: string, retry?: boolean): Promise<Response>;
    post(url: string, method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH", body: string | FormData, contentType?: string, retry?: boolean): Promise<Response>;
    upload(url: string, method: "POST" | "PUT" | "PATCH", body: string | FormData, contentType?: string, onProgress?: (progress: number) => void, retry?: boolean): Promise<Response>;
    destroy(): void;
}
//# sourceMappingURL=weavy-context.d.ts.map